--------------------------------------------------
改造前：
重复进件（配置在xml中），各种检查（用if else代码去处理的）
每次有新产品开发，都要对原有代码改动，比如改xml，加if else逻辑等


改造后；每个产品对应一个handler
map中key=产品ccode，value对应具体的handler（handler接口有4个方法，名字就是对应product code，是否是create阶段，是否是submit阶段，run方法）
现在新加产品，只要实现handler接口，实现具体的业务逻辑就可以
如果新加产品没有对应的handler（则会走默认的handler逻辑，会去检查审批必填的字段是否有值）

--------------------------------------------------
合约参数
改造前：一个product code对应一个service去处理，新code没有找到对应的service回去走默认的逻辑（但是默认逻辑处理出来的合约数据都是无法满足当前产品需求的）
改造后：一个合约参数对应一个service，对应不同产品对同一个参数有不同的逻辑需要在这个service里面去兼容处理

工作中遇到棘手的问题：
1、有次发布sql，有一条sql新加，新加一个（本来列名是to_user_id，现在改成aid），sql是先add一个列，然后一个sql把原来列的数据copy到新列
因为2列都没有索引，就算有索引，也会升级到表级锁，导致后续的insert、update阻塞了，接口大量异常，后续dba给出停机发布，让sql先执行好
其他可以在夜间执行这些sql，或者对于新数据双写，老数据可以定时任务后台去更新，全部更新后，再切换到新列


工作中有啥挑战：
当时在千寻的时候，有个卡券系统的需求，当时分配到我这，我需要根据需求，整理出系统需要划分的模块，以及各模块的具体功能，还可以大致给出设计方案（以及怎么整合集成现有的系统），然后要经过评审，因为之前没经历过项目独自设计开发，心里有点小小的紧张和兴奋


棘手的问题2：
消费rabbitmq消息的时候，发现一条消息消费失败的之后没有进入catch代码块，导致重复消费这个消息，进入死循环了，导致后续的消息无法被消费，经排查有人把catch的excetption改成自定义的exception导致的


项目中有啥可以优化的地方;
比如，提供给审批的批复接口和发起签约流程的接口可以合并到一起，还有上标接口可以取消，通过mq来实现上标

对于代码的设计首先要考虑代码的可读性，这样方便与自己也方便与别人


